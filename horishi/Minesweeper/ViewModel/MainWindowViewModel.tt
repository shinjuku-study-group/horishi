<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="D:\c#\horishi\Minesweeper\bin\Debug\Minesweeper.exe" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
    IEnumerable<Tuple<Type, string>> get_only_props = new List<Tuple<Type, string>>()
    {
        new Tuple<Type, string>(typeof(string), "WindowTitle"),
        new Tuple<Type, string>(typeof(string), "StartButtonContext"),
        new Tuple<Type, string>(typeof(string), "RemainMineCountLabel"),
        new Tuple<Type, string>(typeof(string), "ClearTimeLabelContext")
    };
    IEnumerable<Tuple<Type, string[]>> get_and_set_props = new List<Tuple<Type, string[]>>()
    {
        new Tuple<Type, string[]>(typeof(double), new string[] { "windowWidth", "WindowWidth" }),
        new Tuple<Type, string[]>(typeof(double), new string[] { "windowHeight", "WindowHeight" }),
        new Tuple<Type, string[]>(typeof(double), new string[] { "gridWidth", "GridWidth" }),
        new Tuple<Type, string[]>(typeof(double), new string[] { "gridHeight", "GridHeight" }),
        new Tuple<Type, string[]>(typeof(int), new string[] { "column", "Column" }),
        new Tuple<Type, string[]>(typeof(int), new string[] { "row", "Row" }),
        new Tuple<Type, string[]>(typeof(int), new string[] { "remainMineCount", "RemainMineCount" }),
        new Tuple<Type, string[]>(typeof(string), new string[] { "clearTextLableContext", "ClearTextLableContext" }),
        new Tuple<Type, string[]>(typeof(string), new string[] { "clearTime", "ClearTime" }),
    };
#>
using Minesweeper.Common;
using Minesweeper.Properties;
using System;
using System.Collections.Generic;

namespace Minesweeper.ViewModel
{
    /// <summary>
    /// メイン画面のViewModelクラス(t4テンプレート生成部分)
    /// </summary>
    public sealed partial class MainWindowViewModel : ViewModelBase
    {

        #region フィールド
<#
        foreach(var prop in get_and_set_props)
        {
#>
        private <#= prop.Item1 #> <#= prop.Item2[0] #> ;

<#
        }
#>

        #endregion

        #region プロパティ
<#
        foreach(var prop in get_only_props)
        {
#>

        public <#= prop.Item1 #> <#= prop.Item2 #>
        {
<#
            if(prop.Item1 == typeof(string))
            {
#>
            get { return Resources.<#= prop.Item2 #>; }
        }
<#
            }
            else
            {
#>
            get { return <#= prop.Item1 #>.Parse(Resources.<#= prop.Item2 #>); }
        }
<#
            }
        }
        foreach(var prop in get_and_set_props)
        {
#>

        public <#= prop.Item1 #> <#= prop.Item2[1] #>
        {
            get
            {
                return this.<#= prop.Item2[0] #>;
            }
            set
            {
                this.<#= prop.Item2[0] #> = value;
                base.NotifyChanged("<#= prop.Item2[1] #>");
            }
        }

<#
        }
#>
        #endregion
    }
}
